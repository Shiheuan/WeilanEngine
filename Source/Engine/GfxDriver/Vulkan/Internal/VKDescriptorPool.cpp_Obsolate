#include "VKDescriptorPool.hpp"
#include "VKObjectManager.hpp"

#include <spdlog/spdlog.h>
namespace Engine::Gfx::Obsolate
{
    VKDescriptorPool::VKDescriptorPool(
        VKObjectManager* objManager,
        std::vector<VkDescriptorPoolSize>&& poolSizes,
        VkDescriptorSetLayout layout, uint32_t poolMaxSize) : objManager(objManager), poolSizes(std::move(poolSizes)), layout(layout)
    {
        createInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
        createInfo.pNext = VK_NULL_HANDLE;
        createInfo.flags = 0;
        createInfo.maxSets = poolMaxSize;
        createInfo.poolSizeCount = this->poolSizes.size();
        createInfo.pPoolSizes = this->poolSizes.data();
    }

    VKDescriptorPool::~VKDescriptorPool()
    {
        if (freePool != VK_NULL_HANDLE)
        {
            objManager->DestroyDescriptorPool(freePool);
        }

        for(auto v : fullPools)
        {
            objManager->DestroyDescriptorPool(v);
        }
    }

    VkDescriptorSet VKDescriptorPool::RequestDescriptorSet()
    {
        if (!freeSets.empty())
        {
            auto back = freeSets.back();
            freeSets.pop_back();
            return back;
        }
        
        if (freePool == VK_NULL_HANDLE)
            objManager->CreateDescriptorPool(createInfo, freePool);

        VkDescriptorSetAllocateInfo allocateInfo;
        allocateInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        allocateInfo.pNext = VK_NULL_HANDLE;
        allocateInfo.descriptorPool = freePool;
        allocateInfo.descriptorSetCount = 1;
        allocateInfo.pSetLayouts = &layout;

        VkDescriptorSet set;

        VkResult result = vkAllocateDescriptorSets(objManager->GetDevice(), &allocateInfo, &set);
        if (result == VK_ERROR_OUT_OF_POOL_MEMORY || result == VK_ERROR_FRAGMENTED_POOL)
        {
            // create a new pool and allocate again
            if (freePool != VK_NULL_HANDLE) fullPools.push_back(freePool);
            objManager->CreateDescriptorPool(createInfo, freePool);
            allocateInfo.descriptorPool = freePool;
            VkResult result = vkAllocateDescriptorSets(objManager->GetDevice(), &allocateInfo, &set);

            if (result != VK_SUCCESS)
            {
                SPDLOG_ERROR("Descriptor pool allocation failed");
                assert(0);
            }
        }

        return set;
    }

    void VKDescriptorPool::ReleaseDescriptorSet(VkDescriptorSet set)
    {
        freeSets.push_back(set);
    }
}
