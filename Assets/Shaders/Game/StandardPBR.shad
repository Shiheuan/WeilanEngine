// Reference: https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
#version 450
#include "Common/Common.glsl"
#include "VirtualTexture/VirtualTexture.glsl"
#define M_PI 3.1415926535897932384626433832795

#if CONFIG
name: Game/StandardPBR
#endif

#define LOC_ShadowMapCS 5

#if VERT
layout(location = 0) in vec3 i_Position;
layout(location = 1) in vec3 i_Normal;
layout(location = 2) in vec4 i_Tangent;
layout(location = 3) in vec2 i_UV;

layout(location = 0) out vec3 o_PositionWS;
layout(location = 1) out vec3 o_NormalWS;
layout(location = 2) out vec3 o_TangentWS;
layout(location = 3) out vec3 o_BinormalWS;
layout(location = 4) out vec2 o_UV;
layout(location = LOC_ShadowMapCS) out vec4 o_ShadowCS;
void main()
{
    o_PositionWS = vec3(pconst.model * vec4(i_Position, 1));
    o_NormalWS = (inverse(transpose(pconst.model)) * vec4(i_Normal,1)).xyz;
    o_TangentWS = (inverse(transpose(pconst.model)) * vec4(i_Tangent.xyz,1)).xyz;
    o_BinormalWS = cross(o_NormalWS, o_TangentWS) * i_Tangent.w;
    o_UV = i_UV;

    o_ShadowCS = scene.worldToShadow * vec4(o_PositionWS, 1);

    gl_Position = scene.viewProjection * vec4(o_PositionWS, 1);
}
#endif

#if FRAG
layout(location = 0) in vec3 i_PositionWS;
layout(location = 1) in vec3 i_NormalWS;
layout(location = 2) in vec3 i_TangentWS;
layout(location = 3) in vec3 i_BinormalWS;
layout(location = 4) in vec2 i_UV;
layout(location = LOC_ShadowMapCS) in vec4 i_ShadowCS;

layout(location = 0) out vec4 o_Color;

#define BaseColorTex baseColorTex_sampler_linear
#define NormalMap normalMap_sampler_linear
#define MetallicRoughnessMap metallicRoughnessMap_sampler_linear

layout(set = SET_MATERIAL, binding = 0) uniform PBR
{
    vec3 baseColorFactor;
    float roughness;
    float metallic;
} matParams;
layout(set = SET_MATERIAL, binding = 1) uniform sampler2D BaseColorTex;
layout(set = SET_MATERIAL, binding = 2) uniform sampler2D NormalMap;
layout(set = SET_MATERIAL, binding = 3) uniform sampler2D MetallicRoughnessMap;

#define Roughness matParams.roughness
#define Metallic matParams.metallic
#define NearZero 0.000001

float pow2(float x)
{
    return x * x;
}

void main()
{
// get normal
    vec3 tangent = normalize(i_TangentWS);
    vec3 normal = normalize(i_NormalWS);
    vec3 binormal = normalize(i_BinormalWS);
    mat3 TBN = {tangent, binormal, normal};
    vec3 normalMap = texture(NormalMap, i_UV).xyz;
    normal = TBN * normalMap;

    vec2 metallicRoughness = vec2(Roughness, Metallic) * texture(MetallicRoughnessMap, i_UV).gb;
    float roughness = metallicRoughness.x;
    float metallic = metallicRoughness.y;
    vec3 indirectLight = vec3(0,0,0);

    vec3 baseColor = texture(BaseColorTex, i_UV).xyz / M_PI * matParams.baseColorFactor;
    for (int i = 0; i < scene.lightCount.x; ++i)
    {
        vec4 lightPos = scene.lights[i].position;
        vec3 v = normalize(scene.viewPos.xyz - i_PositionWS);
        vec3 l = lightPos.xyz;
        vec3 n = normalize(normal);

        vec3 h = normalize(l + v);
        float dotNH = max(dot(n,h), NearZero);
        float dotNV = max(dot(n,v), NearZero);
        float dotNL = max(dot(n,l), NearZero);
        float dotVH = max(dot(v,h), NearZero);
        float r2 = roughness * roughness;

    // ndf
        float D = r2 / (M_PI * pow2(pow2(dotNH) * (r2 - 1) + 1));

    // geometry
        float k = pow2(roughness + 1) / 8;
        float Gv = dotNV / (dotNV * (1 - k) + k);
        float Gl = dotNL / (dotNL * (1 - k) + k);
        float G = Gv * Gl;

    // fresnel
        float F = metallic + (1 - metallic) * pow(2, (-5.55472 * dotVH - 6.98316) * dotVH);

        float brdf = (G * F * D) / (4 * dotNL * dotNV);
        float light = dotNL * scene.lights[i].intensity;
        indirectLight += light * (baseColor + brdf);
    }

    // shadow mask
    vec2 shadowUV = i_ShadowCS.xy / i_ShadowCS.w * 0.5 + 0.5;
    float objShadowDepth = i_ShadowCS.z / i_ShadowCS.w;
    float shadowDepth = 0;
    if (shadowUV.x < 1 && shadowUV.y < 1 && shadowUV.x > 0 && shadowUV.y > 0)
    {
        shadowDepth = texture(shadowMap, shadowUV).x;
    }


    float shadowAttenuation = 1.0;
    if (objShadowDepth > shadowDepth + 0.00001)
    {
        shadowAttenuation = 0;
    }

    o_Color = vec4(indirectLight * shadowAttenuation, 1);
}
#endif


