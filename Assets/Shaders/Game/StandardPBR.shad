// Reference: https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf
#version 450
#include "Common/Common.glsl"
#define M_PI 3.1415926535897932384626433832795

#if CONFIG
name: Game/StandardPBR
#endif

#if VERT
layout(location = 0) in vec3 i_Position;
layout(location = 1) in vec3 i_Normal;

layout(location = 0) out vec3 o_PositionWS;
layout(location = 1) out vec3 o_NormalWS;
void main()
{
    o_PositionWS = vec3(pconst.model * vec4(i_Position, 1));
    o_NormalWS = (inverse(transpose(pconst.model)) * vec4(i_Normal,1)).xyz;

    gl_Position = scene.viewProjection * vec4(o_PositionWS, 1);
}
#endif

#if FRAG
layout(location = 0) in vec3 i_PositionWS;
layout(location = 1) in vec3 i_NormalWS;

layout(location = 0) out vec4 o_Color;

layout(set = SET_MATERIAL, binding = 0) uniform MaterialParams
{
    float roughness;
    float f0;
} matParams;

#define Roughness 0.1f// matParams.roughness
#define F0 0.1f // matParams.f0
#define NearZero 0.000001

float pow2(float x)
{
    return x * x;
}

void main()
{
    vec3 v = normalize(scene.viewPos - i_PositionWS);
    vec3 l = normalize(vec3(0.5,0.5,0.5));
    vec3 n = normalize(i_NormalWS);

    vec3 h = normalize(l + v);
    float dotNH = max(dot(n,h), NearZero);
    float dotNV = max(dot(n,v), NearZero);
    float dotNL = max(dot(n,l), 0);
    float dotVH = max(dot(v,h), NearZero);
    float r2 = Roughness * Roughness;

// ndf
    float D = r2 / (M_PI * pow2(pow2(dotNH) * (r2 - 1) + 1));

// geometry
    float k = pow2(Roughness + 1) / 8;
    float Gv = dotNV / (dotNV * (1 - k) + k);
    float Gl = dotNL / (dotNL * (1 - k) + k);
    float G = Gv * Gl;

// fresnel
    float F = F0 + (1 - F0) * pow(2, (-5.55472 * dotVH - 6.98316) * dotVH);

    float brdf = (G * F * D) / (4 * dotNL * dotNV);

    o_Color = vec4((dotNL * (1 / M_PI + brdf)).xxx, 1);

    
}
#endif


