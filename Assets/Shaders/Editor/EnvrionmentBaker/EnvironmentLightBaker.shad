#version 450 core

#define PI 3.14159265359f
#if CONFIG
name: EnvironmentLightBaker
// interleaved: true
cull: none
#endif

struct VertToFrag { vec2 uv; vec3 viewDir; };

layout(set = 0, binding = 0) uniform BakeInfo
{
    vec4 uFrom, uTo;
    vec4 vFrom, vTo;
    float roughness;
} bakeInfo;
layout(set = 0, binding = 1) uniform sampler2D environmentMap;

vec3 BakeInfo_GetViewDir(vec2 uv)
{
    return mix(bakeInfo.uFrom, bakeInfo.uTo, uv.x).xyz +
           mix(bakeInfo.vFrom, bakeInfo.vTo, uv.y).xyz;
}

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec2 CartesianToSpherical(vec3 V)
{
    float theta = acos(V.y);
    float phi = atan(V.z/V.x);
    return vec2(theta, phi);
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}  

#if VERT

layout(location = 0) out VertToFrag v2f;

void main()
{
    vec4 tri[3] = {
        {-1, -3, 0.5, 1},
        {-1, -1, 0.5, 1},
        {3, 1, 0.5, 1},
    };
    vec4 pos = tri[gl_VertexIndex];

    v2f.uv = pos.xy * 0.5 + 0.5;
    v2f.viewDir = BakeInfo_GetViewDir(v2f.uv);

    gl_Position = pos;
}
#endif

#if FRAG

#define sTexture sTexture_sampler_linear
layout(location = 0) in VertToFrag v2f;
layout(location = 0) out vec4 fragColor;

void main()
{
    vec3 N = normalize(v2f.viewDir);
    vec3 V = N;

    const uint SAMPLE_COUNT = 1024u;
    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, bakeInfo.roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            prefilteredColor += texture(environmentMap, CartesianToSpherical(L)).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    fragColor = vec4(prefilteredColor, 1.0);
}
#endif
